<?php
namespace Civi\API\V4;

/**
 * Takes a raw set of data generated by the conformance test and makes docs.
 */
class Documenter  {

  public $preamble = '# CiviCRM API V4';
  public $event_file = 'event_listeners';

  public $footer = '###### This file was automatically generated. Do not edit directly.';

  /**
   * Convert a data blob into markdown
   * @param array blob
   */
  public function __construct($path) {
    $this->path = $path;
    $this->index_file = 'index.md';
  }

  /**
   * Create an index of event handlers
   * @returns string
   */
  public function eventListeners() {
    $kernel = \Civi::service('civi_api_kernel');
    $this->dispatcher = $kernel->getDispatcher();
    $listeners = $this->dispatcher->getListeners();
    $entity = $this->event_file;
    $string = $this->heading(1, $entity, "Listeners");
    foreach ($listeners as $event => $event_listeners) {
      $string .= $this->heading(2, $entity, $event);
      foreach ($event_listeners as $n => $listener) {
        $reflection = new \ReflectionClass($listener[0]);
        $method = $reflection->getName() . "::" . ($listener[1]);
        $string .= $this->heading(3, $entity, $event . $method);
        $string .= "\nsource: " . $reflection->getFileName()
          . " lines: " . $reflection->getStartLine()
          . "-" . $reflection->getEndLine();
        $string .= "\n Methods:\n```\n"
          . json_encode(get_class_methods($listener[0]), JSON_PRETTY_PRINT)
          . "\n```\n";
      }
    }
    return $string;
  }

  /**
   * Convert a data blob into markdown
   * @param array blob
   */
  public function write($name, $string) {
    file_put_contents($this->path .  DIRECTORY_SEPARATOR . $name,
      $string . $this->footer);
  }

  /**
   * Markdown (HTML) anchor tag
   * @param array html anchor name
   * @see link()
   */
  public function heading($level, $entity, $name, $text='') {
    if (!$text) {
      $text = ucwords("$entity $name");
    }
    return "\n"
      . str_repeat('#', $level)
      . " <a name='$name'></a>$text [:house:](index.md)\n\n";
  }

  /**
   * Markdown link text
   * @param
   * @see heading()
   */
  public function link($entity, $name, $label='') {
    if (!$label) {
      $label = ucwords("$entity $name");
    }
    return "[$label](${entity}.md/#$name)";
  }

  /**
   * Link to source code of a CiviCRM class
   * (Only tested for Civi\* classes)
   * @param string $class
   */
  public function classLink($class) {
    $base = 'https://github.com/civicrm/civicrm-core/blob/master';
    // reverse slash direction and link to line 28 below copyright notice
    $link = str_replace('\\', '/', $class) . '.php#L28';
    return "[$class]($base/$link)";
  }

  /**
   * Link to developer documentation for a CiviCRM hook
   * @param string $hook - short hook name
   */
  public function hookLink($hook) {
    $base = 'https://docs.civicrm.org/dev/en/master/hooks/hook_civicrm_';
    return "[$hook]($base$hook/)";
  }

  /**
   * Express an array of method names as markdown
   * @param string $methods
   * @return string
   */
  public function methodList($methods) {
    return '`' . implode('()`, `', $methods) . "()`";
  }

  /**
   * Render the ConformanceTest trace blob into a collection of markdown files.
   *
   * Makes an index table of "Entity | Actions | Fields" as well as one file
   * per entity.
   *
   * @param array blob
   */
  public function blobToMarkDown($blob) {
    $index = $this->preamble . "\n\n";
    $index .= $this->link($this->event_file, "Listeners");
    $index .= "Entity | Actions | Fields\n";
    $index .= "------ | ------- | ------\n";
    foreach ($blob['entity'] as $entity => $entity_blob) {
      $string = '';
      $entity_title = $this->heading(1, $entity, 'top', $entity);
      $entity_index = "Action | Params | Example\n";
      $entity_index .= "------ | ------ | -------\n";
      foreach ($entity_blob['action'] as $action => $action_blob) {
        $entity_index .= $this->link($entity, "action_$action", $action)
          . ' | ';
        $string .= $this->heading(2, $entity, "action_$action",
          "Action $entity.$action");
        $index .= ' ' . $this->link($entity, "action_$action", "$action");
        $string .= "$action_blob[description]\n\n";
        $string .= $this->heading(3, $entity, "${action}_params",
          "Params");
        $entity_index .= $this->link($entity, "${action}_params", "Params")
          . ' | ';
        foreach ($action_blob['params'] as $param => $param_blob) {
          // add some defaults just in case:
          $param_blob += array(
            'description' => '??',
            'type' => array('??'),
            'default' => '??',
            'comment' => ''
          );
          $string .= "* **$param** "
            .  "(`" . implode('|', $param_blob['type']) . '`: `'
            . json_encode($param_blob['default']) . '`)'
            . "\n"
            . "  " . $param_blob['description']
            . ($param_blob['comment'] ? "  " . $param_blob['comment'] : '')
            . "\n";
        }
        // (optional) example
        if (isset($blob['examples']["$entity.$action"])) {
          $entity_index .= '['
            . $this->link($entity, "${action}_example_params", "Params")
            . '] ['
            . $this->link($entity, "${action}_example_result", "Result")
            . '] ['
            . $this->link($entity, "${action}_example_events", "Events")
            . '] ['
            . $this->link($entity, "${action}_example_hook_calls", "Hooks")
            . ']';
          $index .= ' ' . $this->link($entity, "${action}_example", ":art:");
          $example = $blob['examples']["$entity.$action"];
          $string .= $this->heading(2, $entity, "${action}_example",
            "Example");
          $string .= "This is the example derived from the unit tests. A log
            of hook calls and events is below the API request and response.\n";
          $string .= $this->heading(3, $entity, "${action}_example_params",
            "Params");
          $string .= "```\n"
            . json_encode($example['params'], JSON_PRETTY_PRINT)
            . "\n```\n";
          $string .= $this->heading(3, $entity, "${action}_example_result",
            "Result");
          $string .= "```\n"
            . json_encode($example['result'], JSON_PRETTY_PRINT)
            . "\n```\n";
          $string .= $this->heading(3, $entity, "${action}_example_events",
            "Events");
          $event_string = '';
          $event_index = '';
          foreach ($example['events'] as $n => $event) {
            $request = $event->getApiRequest();
            // v3 is an array, v4 a proper object
            $api_call = is_object($request)
                ? $request->getEntity() . '::' .  $request->getAction()
                : $request['entity'] . '::' .  $request['action'];
            $anchor = "${action}_example_events_$n";
            $title = $event->getName() . ' - ' . $api_call;
            $event_index .= '* ' . $this->link($entity, $anchor, $title) . "\n";
            $event_string .= $this->heading(4, $entity, $anchor, $title);
            $parent = get_parent_class($event);
            $event_methods = get_class_methods($event);
            if ($parent) {
              $parent_methods = get_class_methods($parent);
              // subtract parent methods:
              $event_methods = array_diff($event_methods, $parent_methods);
            }
            $event_string .= "> " . $this->classLink(get_class($event))
              . ($parent ? ' extends ' . $this->classLink($parent) : '')
              . "\n\n";
            $event_string .= "*Methods:* "
              . $this->methodList($event_methods)
              . ($parent
                ? "\n\n*Inherits:* " . $this->methodList($parent_methods)
                : '')
              . "\n\n";
            $event_string .= $this->heading(5, $entity,
              "${action}_example_event_params_$n", "API Request params")
              . (is_object($request)
                ? '*Methods*:' . $this->methodList(get_class_methods($request))
                  . "\n\nParams: \n```\n"
                  . json_encode($request->getParams(), JSON_PRETTY_PRINT)
                  . "\n```"
                : "```\n" . json_encode($request, JSON_PRETTY_PRINT) . "\n```")
              . "\n\n";
          }
          $string .= $event_index . $event_string;
          // hooks
          $string .= $this->heading(3, $entity, "${action}_example_hook_calls",
            "Hook calls");
          foreach ($example['hook_calls'] as $hook => $hook_call) {
            $string .= "* "
              . $this->hookLink($hook) . ' '
              . json_encode($hook_call)
              . "\n";
          }
        }
        $entity_index .= "\n";
      }
      $index .= ' | ';
      // fields !
      if (array_key_exists('fields', $entity_blob)) {
        $string .= $this->heading(2, $entity, 'fields');
        $field_index = array();
        foreach ($entity_blob['fields'] as $field => $field_blob) {
          $field_index[] = $this->link($entity, "field_$field", $field);
          $string .= $this->heading(3, $entity, "field_$field", $field);
          $index .= ' ' . $this->link($entity, "field_$field", $field);
          // todo make this beautiful
          $string .= "```\n"
            . json_encode($field_blob, JSON_PRETTY_PRINT)
            . "\n```\n";
        }
        $entity_index .= "**Fields**: " . implode(', ', $field_index) . "\n";
      }
      $index .= "\n";
      $this->write($entity . '.md', $entity_title . $entity_index . $string);
      // write event listeners file:
    }
    $this->write($this->index_file, $index);
    $this->write($this->event_file . '.md', $this->eventListeners());
  }

}
