<?php
namespace Civi\API\V4;

/**
 * Takes a raw set of data generated by the conformance test and makes docs.
 */
class Documenter  {

  public $preamble = '# We should put something profound here.';

  public $footer = '###### This file was automatically generated. Do not edit directly.';

  /**
   * Convert a data blob into markdown
   * @param array blob
   */
  public function __construct($path) {
    $this->path = $path;
    $this->index_file = 'index.md';
  }

  /**
   * Convert a data blob into markdown
   * @param array blob
   */
  public function write($name, $string) {
    file_put_contents($this->path .  DIRECTORY_SEPARATOR . $name,
      $string . $this->footer);
  }

  /**
   * Markdown (HTML) anchor tag
   * @param array html anchor name
   * @see link()
   */
  public function title($level, $entity, $name, $title='') {
    if (!$title) {
      $title = ucwords("$entity $name");
    }
    return "\n"
      . str_repeat('#', $level)
      . "<a name='$name'></a>$title [:house:](index.md)\n\n";
  }

  /**
   * Markdown link text
   * @param
   * @see title()
   */
  public function link($entity, $name, $title='') {
    if (!$title) {
      $title = ucwords("$entity $name");
    }
    return "[$title](${entity}.md/#$name)";
  }

  /**
   * Convert a data blob into markdown
   * Makes and index table of Entity | Actions | Fields
   * @param array blob
   */
  public function blobToMarkDown($blob) {
    $index = $this->preamble . "\n\n";
    $index .= "Entity | Actions | Fields\n";
    $index .= "------ | ------- | ------\n";
    foreach ($blob['entity'] as $entity => $entity_blob) {
      $string = '';
      $string .= $this->title(1, $entity, 'top', $entity);
      $index .= $this->link($entity, 'top', $entity) . ' | ';
      foreach ($entity_blob['action'] as $action => $action_blob) {
        $string .= $this->title(2, $entity, "action_$action",
          "Action $entity.$action");
        $index .= ' ' . $this->link($entity, "action_$action", "$action");
        $string .= "$action_blob[description]\n\n";
        $string .= $this->title(3, $entity, "action_${action}_params",
          "Params");
        foreach ($action_blob['params'] as $param => $param_blob) {
          // add some defaults just in case:
          $param_blob += array(
            'description' => '??',
            'type' => array('??'),
            'default' => '??',
            'comment' => ''
          );
          $string .= "* **$param** "
            .  "(`" . implode('|', $param_blob['type']) . '`: `'
            . json_encode($param_blob['default']) . '`)'
            . "\n"
            . "  " . $param_blob['description']
            . ($param_blob['comment'] ? "  " . $param_blob['comment'] : '')
            . "\n";
        }
      }
      $index .= ' | ';
      // fields !
      if (array_key_exists('fields', $entity_blob)) {
        $string .= $this->title(2, $entity, 'fields');
        foreach ($entity_blob['fields'] as $field => $field_blob) {
          $string .= $this->title(3, $entity, "field_$field", $field);
          $index .= ' ' . $this->link($entity, "field_$field", $field);
          // todo make this beautiful
          $string .= "```\n"
            . json_encode($field_blob, JSON_PRETTY_PRINT)
            . "\n```\n";
        }
        if (isset($blob['examples']["$entity.$action"])) {
          $example = $blob['examples']["$entity.$action"];
          $string .= $this->title(2, $entity, "${action}_example",
            "Example");
          $string .= $this->title(3, $entity, "${action}_example_params",
            "Params");
          $string .= "```\n"
            . json_encode($example['params'], JSON_PRETTY_PRINT)
            . "\n```\n";
          $string .= $this->title(3, $entity, "${action}_example_result",
            "Result");
          $string .= "```\n"
            . json_encode($example['result'], JSON_PRETTY_PRINT)
            . "\n```\n";
          $string .= $this->title(3, $entity, "${action}_example_events",
            "Events");
          foreach ($example['events'] as $n => $event) {
            $string .= $this->title(4, $entity, "${action}_example_events_$n",
              $event->getName());
            $string .= "Methods:\n```\n"
              . json_encode(get_class_methods($event), JSON_PRETTY_PRINT)
              . "\n```\n";
          }
          $string .= $this->title(3, $entity, "${action}_example_hook_calls",
            "Hook calls");
          $string .= "```\n"
            . json_encode($example['hook_calls'], JSON_PRETTY_PRINT)
            . "\n```\n";
        }
      }
      $index .= "\n";
      $this->write($entity . '.md', $string);
    }
    $this->write($this->index_file, $index);
    echo json_encode($blob, JSON_PRETTY_PRINT);
  }

}
